apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "codetogether.fullname" . }}
  labels:
    {{- include "codetogether.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "codetogether.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/properties: {{ include (print $.Template.BasePath "/secret-properties.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "codetogether.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.imageCredentials.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.imageCredentials.pullSecret }}
      {{- else if eq .Values.imageCredentials.enabled true }}
      imagePullSecrets:
        - name: {{ include "codetogether.fullname" . }}-pull-secret
      {{- end }}
      serviceAccountName: {{ include "codetogether.serviceAccountName" . }}
      {{- if .Values.openshift.enabled }}
      # OpenShift
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: "OnRootMismatch"
      {{- else if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.securityContext.readOnlyRootFilesystem }}
      initContainers:
        - name: prepare-runtime
          image: busybox:1.36
          command: ["/bin/sh","-c"]
          args:
            {{- if .Values.openshift.enabled }}
            - |
              set -eu
              umask 002
              for d in \
                /var/log/nginx \
                /var/cache/nginx
              do
                install -d -m 2775 "$d"
              done
            {{- else }}
            - |
              set -eu
              umask 002
              for d in \
                /var/log/nginx \
                /var/cache/nginx
              do
                install -d -m 2775 "$d"
              done
              chown -R {{ default 1000 .Values.securityContext.runAsUser }}:{{ default 1000 .Values.securityContext.runAsGroup | default 1000 }} \
                /run /var/log/nginx /var/cache/nginx
            {{- end }}
          securityContext:
            {{- if .Values.openshift.enabled }}
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            {{- else }}
            runAsUser: 0
            runAsGroup: 0
            runAsNonRoot: false
            allowPrivilegeEscalation: false
            {{- end }}
          volumeMounts:
            - { name: codetogether-runtime, mountPath: /run }
            - { name: codetogether-runtime, mountPath: /var/log/nginx }
            - { name: codetogether-runtime, mountPath: /var/cache/nginx }
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: AI_MODE
              value: {{ .Values.ai.mode | quote }}
            {{- if eq .Values.ai.mode "bundled" }}
            - name: AI_BUNDLED_URL
              value: "http://localhost:8000"
            {{- end }}
            {{- if and .Values.ai.enabled (eq .Values.ai.mode "external") }}
            - name: AI_PROVIDER
              valueFrom:
                configMapKeyRef:
                  name: {{ printf "%s-ai-config" (include "codetogether.fullname" .) }}
                  key: ai_provider
            - name: AI_EXTERNAL_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ printf "%s-ai-config" (include "codetogether.fullname" .) }}
                  key: ai_url
            - name: AI_EXTERNAL_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-ai-external-secret" (include "codetogether.fullname" .)) .Values.ai.externalSecret.name | quote }}
                  key: apiKey
            {{- end }}
            # Set CodeTogether runtime configuration
            - name: CT_HQ_BASE_URL
              value: {{ .Values.codetogether.url | quote }}
            {{- if .Values.java.customCacerts.enabled }}
            - name: CT_TRUST_STORE
              value: -Djavax.net.ssl.trustStore=/etc/ssl/certs/java/cacerts
            {{- end }}
            {{- if .Values.java.customJavaOptions }}
            - name: CT_JAVA_OPTIONS
              value: "{{ .Values.java.customJavaOptions | default "" }}"
            {{- end }}
            {{- if and .Values.java.customCacerts.enabled .Values.java.customCacerts.trustStorePasswordKey }}
            - name: CT_TRUST_STORE_PASSWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.java.customCacerts.cacertsSecretName }}
                  key: {{ .Values.java.customCacerts.trustStorePasswordKey }}
                  optional: true
            {{- end }}
            {{- if .Values.codetogether.trustAllCerts }}
            - name: CT_TRUST_ALL_CERTS
              value: "true"
            {{- end }}
            {{- if .Values.ai.enabled }}
            - name: CT_HQ_OLLAMA_AI_URL
              value: {{ if eq .Values.ai.mode "bundled" }}
                "http://localhost:8000"
              {{ else }}
                {{ .Values.ai.url | quote }}
              {{ end }}
            - name: CT_HQ_OLLAMA_AI_MODEL_NAME
              value: {{ .Values.ai.modelName | default "gemma3:1b" | quote }}
            - name: CT_HQ_OLLAMA_AI_API_KEY
              {{- if eq .Values.ai.mode "bundled" }}
              value: "apiKey"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-ai-external-secret" (include "codetogether.fullname" .)) .Values.ai.externalSecret.name | quote }}
                  key: apiKey
              {{- end }}
            {{- end }}
{{- if .Values.securityContext.readOnlyRootFilesystem }}
          volumeMounts:
            - name: properties-volume
              mountPath: /opt/codetogether/runtime/cthq.properties
              subPath: cthq.properties
            {{- if .Values.java.customCacerts.enabled }}
            - name: java-cacerts
              mountPath: /etc/ssl/certs/java/cacerts
              subPath: cacerts
            {{- end }}
            # Read-only root FS mounts
            - mountPath: /run
              name: codetogether-runtime
            - mountPath: /tmp
              name: codetogether-tmp
            - mountPath: /var/log/nginx
              name: codetogether-runtime
            - mountPath: /var/cache/nginx
              name: codetogether-runtime
{{- else }}
          volumeMounts:
            - name: properties-volume
              mountPath: /opt/codetogether/runtime/cthq.properties
              subPath: cthq.properties
            {{- if .Values.java.customCacerts.enabled }}
            - name: java-cacerts
              mountPath: /etc/ssl/certs/java/cacerts
              subPath: cacerts
            {{- end }}
{{- end }}
          ports:
            - name: http
              containerPort: 1080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            httpGet:
              path: /
              port: http

          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            httpGet:
              path: /
              port: http

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if and .Values.ai.enabled (eq .Values.ai.mode "bundled") }}
        - name: codetogether-llm
          image: "{{ .Values.ai.image.repository }}:{{ .Values.ai.image.tag }}"
          imagePullPolicy: Always
          ports:
            - name: ai
              containerPort: 8000
              protocol: TCP
          {{- if .Values.ai.resources }}
          resources:
            {{- toYaml .Values.ai.resources | nindent 12 }}
          {{- end }}
        {{- end }}
      volumes:
        - name: properties-volume
          secret:
            secretName: {{ if .Values.hqpropertiessecret.enabled }}{{ .Values.hqpropertiessecret.ref }}{{ else if .Values.fullnameOverride }}{{ printf "%s-hqproperties" .Values.fullnameOverride }}{{ else }}hqproperties{{ end }}
        {{- if .Values.java.customCacerts.enabled }}
        - name: java-cacerts
          secret:
            secretName: {{ .Values.java.customCacerts.cacertsSecretName }}
        {{- end }}
{{- if .Values.securityContext.readOnlyRootFilesystem }}
        - name: codetogether-runtime
          emptyDir: {}
        - name: codetogether-tmp
          emptyDir:
            medium: Memory
{{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
