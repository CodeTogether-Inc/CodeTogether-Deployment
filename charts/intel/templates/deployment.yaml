apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "codetogether.fullname" . }}
  labels:
    {{- include "codetogether.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "codetogether.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/properties: {{ include (print $.Template.BasePath "/secret-properties.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "codetogether.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.imageCredentials.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.imageCredentials.pullSecret }}
      {{- else if eq .Values.imageCredentials.enabled true }}
      imagePullSecrets:
        - name: {{ include "codetogether.fullname" . }}-pull-secret
      {{- end }}
      serviceAccountName: {{ include "codetogether.serviceAccountName" . }}
      containers:
        {{- if eq .Values.ai.mode "bundled" }}
        - name: ai-service
          image: "registry.digitalocean.com/codetogether-registry/ai-summarization"
          imagePullPolicy: Always
          env:
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: ai-secrets
                  key: openai-api-key
          ports:
            - name: ai
              containerPort: 8000
              protocol: TCP
          resources:
            {{- toYaml .Values.ai.resources | nindent 12 }}
        {{- end }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: >-
            {{ .Values.image.repository }}
            {{- if .Values.image.digest }}@{{ .Values.image.digest }}
            {{- else }}:{{ .Values.image.tag | default .Chart.AppVersion }}{{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: AI_MODE
            value: {{ .Values.ai.mode | quote }}
          {{- if eq .Values.ai.mode "external" }}
          - name: AI_PROVIDER
            value: {{ .Values.ai.provider | quote }}
          - name: AI_EXTERNAL_URL
            value: {{ .Values.ai.external.url | quote }}
          - name: AI_EXTERNAL_API_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.ai.external.apiKeySecret.name }}
                key: {{ .Values.ai.external.apiKeySecret.key }}
          {{- end }}
          #
          # Set CodeTogether runtime configuration
          #         
          - name: CT_HQ_BASE_URL
            value: {{ .Values.codetogether.url | quote }}

          {{- if .Values.java.customCacerts.enabled }} 
          - name: CT_TRUST_STORE
            value: -Djavax.net.ssl.trustStore=/etc/ssl/certs/java/cacerts 
          {{- end }}

          # Custom Java options (excluding trust store related settings)
          {{- if .Values.java.customJavaOptions }} 
          - name: CT_JAVA_OPTIONS
            value: "{{ .Values.java.customJavaOptions | default "" }}"
          {{- end }}

          # Set trust store password only if trustStorePasswordKey is provided
          {{- if and .Values.java.customCacerts.enabled .Values.java.customCacerts.trustStorePasswordKey }}
          - name: CT_TRUST_STORE_PASSWD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.java.customCacerts.cacertsSecretName }}
                key: {{ .Values.java.customCacerts.trustStorePasswordKey }}
                optional: true  # Ensures the key is optional
          {{- end }}

          volumeMounts:
            - name: properties-volume
              mountPath: /opt/codetogether/runtime/cthq.properties
              subPath: cthq.properties
            {{- if .Values.java.customCacerts.enabled }}
            - name: java-cacerts
              mountPath: /etc/ssl/certs/java/cacerts
              subPath: cacerts
            {{- end }}

          # 
          # Set container configuration
          #
          ports:
            - name: http
              containerPort: 1080
              protocol: TCP
          
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            httpGet:
              path: /
              port: http
          
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            httpGet:
              path: /
              port: http

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: properties-volume
          secret:
            secretName: {{ if .Values.hqpropertiessecret.enabled }}{{ .Values.hqpropertiessecret.ref }}{{ else if .Values.fullnameOverride }}{{ printf "%s-hqproperties" .Values.fullnameOverride }}{{ else }}hqproperties{{ end }}
        {{- if .Values.java.customCacerts.enabled }}
        - name: java-cacerts
          secret:
            secretName: {{ .Values.java.customCacerts.cacertsSecretName }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}